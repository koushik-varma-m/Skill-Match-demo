// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int          @id @default(autoincrement())
  firstname               String
  lastname                String
  username                String       @unique
  email                   String       @unique
  password                String
  role                    UserRole
  profile                 Profile?
  posts                   Post[]
  jobs                    Job[]
  matches                 Match[]

  savedJobs               Job[]    @relation("SavedJobs")
  connectionsSent         Connection[] @relation("UserRequests")
  connectionsReceived     Connection[] @relation("UserReceives")
}

enum UserRole {
  CANDIDATE
  RECRUITER
}

model Connection {
  id             Int      @id @default(autoincrement())
  senderId       Int      
  receiverId     Int  
  status         ConnectionStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  
  sender         User     @relation("UserRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User     @relation("UserReceives", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum ConnectionStatus{
  PENDING
  ACCEPTED
}

model Profile {
  id             Int      @id @default(autoincrement())
  profilePicture String   @default("")
  about          String   @default("")
  skills         String[] @default([""])
  experience     String[] @default([""])
  education      String[] @default([""])
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id             Int      @id @default(autoincrement())
  title          String   
  description    String
  requirements   String
  recruiterId    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime 
  recruiter      User     @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  savedByCandidates User[] @relation("SavedJobs")
}

model Post {
  id             Int      @id @default(autoincrement())
  description    String   
  userId         Int      
  comments       Comment[]
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id             Int      @id @default(autoincrement())
  comment        String
  postId         Int
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Match {
  id             Int      @id @default(autoincrement())
  jobId          Int
  userId         Int
  matchScore     Int
  user           User     @relation(fields:  [userId], references: [id])
}

